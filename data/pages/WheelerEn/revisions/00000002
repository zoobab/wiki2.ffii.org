= David A. Wheeler: The Most Important Software Innovations =

Source: http://www.dwheeler.com/innovation/innovation.html

== Software Patents ==

One source that was not helpful for this analysis were software patents. The reason? Software patents have essentially no relationship to software innovation. Those unfamiliar with software patents may find that shocking.

There are several basic problems with software patents, compared to actual innovation:

   1. almost all truly important innovations in software were never covered by patents, so using patents as a primary source would omit almost all of the most important software innovations;
   2. as software patentability has increased, the number of software innovations has decreased; and
   3. software patents are often granted to cover ideas that are obvious to practitioners of the art or have prior art (even though these aren't supposed to be patented). 

There are many reasons most of the most important software innovations were never patented. Historically, software was not patentable, and it's still not patentable in vast number of countries (including the EU). Many believe software should never be patentable, and many of them oppose software patents on ethical or moral grounds as well as on pragmatic grounds (and many of them will not apply for patents for these reasons). For more about the many who oppose software patents, you can see the ffii.org site and the League for Programming Freedom, including statements by software vendor Oracle and and a list of software luminaries opposed to software patents (including Donald Knuth). Dan Bricklin (inventor of the spreadsheet) explains why introducing patents to the software industry, about 50 years after the industry began (and after it had already been flourishing without them), is a mistake and hardship. AutoCAD's co-author and Autodesk founder John Walker wrote "Patent Nonsense", where he states that "Ever since Autodesk had to pay $25,000 to 'license' a patent which claimed the invention of XOR-draw for screen cursors (the patent was filed years after everybody in computer graphics was already using that trick), I've been convinced that software patents are not only a terrible idea, but one of the principal threats to the software industry... the multimedia industry is shuddering at the prospect of paying royalties on every product they make, because a small company in California has obtained an absurdly broad patent on concepts that were widely discussed and implemented experimentally more than 20 years earlier." Forbes' article ``Patently Absurd'' also notes the problems of patents, as does eWeek. One survey of professional programmers found that by a margin of 79.6% to 8.2%, computer programmers said that granting patents on computer software impedes, rather than promotes, software development (the remaining 12.2% were undecided). By 59.2% to 26.5% (2:1), most went even further, saying that software patents should be abolished outright. Professors Bessen and Maskin, two economists at the Massachusetts Institute of Technology (MIT), have demonstrated in a report that introducing patenting into the software economy only has economic usefulness if a monopoly is the most useful form of software production. This is concerning, because few believe that a monopoly is truly the most useful (or desirable) form of software production.

Paul Vick, lead architect for Visual Basic .Net at Microsoft, was required by his employer to file for a patent on an obvious pre-existing idea (the IsNot operator), which the patent office nevertheless granted -- Paul's posting on Software patents states, "I don't believe software patents are a good idea... software patents generally do much more harm than good. As such, I'd like to see them go away and the US patent office focus on more productive tasks... One of the most unfortunate aspect of the software patent system is that there is a distinct advantage, should you have the money to do so, to try and patent everything under the sun in the hopes that something will stick.... [[overwhelming |the patent system.]] Microsoft has been as much a victim of this as anyone else, and yet we're right there in there with everyone else, playing the game. It's become a Mexican standoff, and there's no good way out at the moment short of a broad consensus to end the game at the legislative level. as far as the specific IsNot patent goes, I will say that at a personal level, I do not feel particularly proud of my involvement in the patent process in this case."

As patentability has increased, there's good evidence that the number of software innovations has decreased. Bessen and Maskin also demonstrated a statistical correlation between the spread of patentability in the United States and a decline in innovation in software. In particular, between 1987 and 1994 , software patents issuance rose 195%, yet real company funded R&D fell by 21% in these (software) industries while rising by 25% in industries in general. This paper gives additional evidence that software patents are inversely related to innovation; it's hard to not notice that as patenting become more common (e.g., 1987 and later) that the number of major innovations slowed down and are almost always not patented anyway. Although these only show correlation and not causality, other data suggest that there is a causal relation. Thus, not only do software patents fail to help encourage innovation - they appear to actively retard innovation.

Bruce Perens explains why patents cause serious problems in creating and implementing standards. Since patents retard the creation and use of standards, they also retard the industry as a whole (since relevant, widely-implemented standards are a key need in the software industry).

The patented European webshop is an excellent illustration of the problem - it shows a few of the many obvious, widely-used ideas of grantedEuropean patents. In short, it demonstrates why patents are a poor match for software.

There are also many reasons why software patents are often granted that cover obvious ideas and prior art (which can give the illusion of innovation without actually having any). As noted by an FTC analysis of patents, in the U.S. about 1,000 patent applications now arrive each day, so patent examiners have from eight to 25 hours to read and understand each application, search for prior art, evaluate patentability, communicate with the applicant, work out necessary revisions, and reach and write up conclusions. (The article also notes -- somehow without irony -- that most granted patents are in fact obvious to practitioners, even though that is illegal.) Many other studies have noted that patent examiners have a poor database of prior art in software, so it's hard for them to find prior art. But the biggest problem is that there are no incentives for anyone in the patent process to reject bogus patents. The patent applicant has every incentive to ignore prior art, the patent examiner has little time or resources to do this search, and a patent examiner who doesn't commit enough resources to the search is rewarded (in contrast, a patent examiner who spends too much time on each patent will be punished). And it's difficult for a patent examiner to declare something is "obvious"; after all, the people who are paying money say that their patent request isn't obvious, and there's little downside for an examiner to agree with the petitioner. Also, other areas of the software industry generally pay more than a patent examiner's salary, decreasing the likelihood that a software patent examiner has the best software experience. The entire software patent examination process favors granting software patents for obvious and prior art. The patent "review" process has become so much of a rubber stamp that Steven Olson managed to obtain a patent on swinging sideways on a swing, an absurd patent that was granted the U.S. patent process.

Frankly, I think permitting software patents in the U.S. was a tremendous mistake, and a misuse of the original patent laws. Very few of the innovations listed here were patented, and of the few that were (e.g., the mouse and RSA), there's little evidence that granting the patents encouraged innovation. The mouse patent never made much money for its inventor, and although the developers of RSA did make money, there's no evidence that they would not have developed RSA without the offer of a patent. Thus, there's a good case to be made that these ideas would have occurred without the patents, and that the patents impeded deployment and increased customer costs without encouraging innovation. The patent laws were originally written to specifically prevent patenting mathematical algorithms, and courts have basically rewritten the laws to re-permit patenting of mathematical algorithms (which is fundamentally what any software patent is). Permitting software patents has done almost nothing to encourage innovation nor award innovators, and the harm that it's done far, far exceeds any claimed good. Most key software technology innovations were never patented, so tracking patents is certain to miss most of the most important innovations. Conversely, since patent examiners have a poor database of prior art in software and there are no incentives for anyone in the patent process to seriously search for prior art, software patents are routinely granted for previous and obvious inventions in software technology. Basically, the number of patents granted for software primarily shows how much money an organization is willing to spend to submit patent applications - it has nothing to do with innovation. The W3C has noted that its policy of ensuring that all W3C standards were royalty free has been key to universal web access; anything else would cause dangerously harmful balkanization. Vint Cerf stated that part of the reason the Internet protocols took hold so quickly and widely was that he and Dr. Kahn made no intellectual property (patent) claims to their invention. "It was an open standard that we would allow anyone to have access to without any constraints."

Any statistic based on software patents is irrelevant when examining software innovation -- because today's software patents have nothing to do with innovation.
