[:ShortIntroDe: DEUTSCH] | [http://epatents.hellug.gr/pages/short_introduction GREEK] | [:ShortIntroFr: FRANÃ‡AIS] | [:ShortIntroIT: ITALIANO] | [:ShortIntroPT: PORTUGUESE] | [:ShortIntroAltEn: New Version]

Before editing or translating this document, please read ShortIntroDiscussionEn

----
= Software Patents in Europe: A Short Overview =

A '''patent''' is a right to monopolize an invention. A "inventor" specifies
a scope of activities from which he wants to exclude others (the claims, implementing what one of them says is enough for an infringement), and
submits it to the Patent Office, which evaluates whether these claims depict an
''invention'' within the sense of the law and whether the invention is correctly disclosed
and industrially applicable (formal examination).  Some patent offices will moreover examine
whether the invention is new and non-obvious (substantive examination).
If the application passes the examination hurdles, the Patent Office grants the applicant the exclusion right to prevent others from producing and marketing the invention for a period of 20 years.

Programming is similar to writing symphonies.  When a programmer writes software, he weaves together thousands of ideas (algorithms or calculation rules) into a copyrighted work. Usually some of the ideas in the programmer's work will be new and non-obvious according to the ([http://swpat.ffii.org/analysis/trivial/ inherently low]) standards of the patent system.  When many such ideas are patented, it becomes [http://webshop.ffii.org/ impossible to write software] without infringing on patents.  Software authors are in effect deprived of their copyright assets; 
they live under permanent threat of being [http://www.forbes.com/asap/2002/0624/044.html blackmailed by holders of large patent portfolios].  
As a result, less software is written and fewer new ideas appear.

In Europe, the uniform rules for what is patentable and what is not are laid out in the [http://www.european-patent-office.org/legal/epc/ European Patent Convention of 1973]. In Article 52, the Convention [http://swpat.ffii.org/analysis/epc52/ states] that mathematical methods, intellectual methods, business methods, computer programs, presentation of information, etc., are not inventions in the sense of patent law. There is a systematic reason for that: in the legal tradition patents have been for concrete applications of natural science ("[http://swpat.ffii.org/analysis/invention/ technical inventions]"), whereas patents on software cover abstract ideas. When patents are applied to software, the result is such that instead of patenting a specific mousetrap, you are actually patenting any "means of trapping mammals" (or, for an example of an actual patent, any "[http://swpat.ffii.org/patents/samples/ep769170/index.en.html means of trapping data in an emulated environment]").

In 1986 the European Patent Office (EPO) [http://swpat.ffii.org/papers/epo-t840208/index.en.html started granting patents describing computer programs in violation of the EPC] by allowing them to be presented in the guise of ''process claims'', typically phrased as follows:

"1. process for [:using :general-purpose computing equipment], characterised by ..." 

The patents granted on this basis were described as hypothetical, based on the notion that the program as such, when distributed on a disk or via the Internet, could be held as not constituting a process and therefore as not an invention in that sense.  In 1998 the European Patent Office "resolved" this ambiguity and [http://swpat.ffii.org/papers/epo-t971173/ began granting patents that literally contradicted the law], by allowing ''program claims'' using the following phrasing:

"2. computer program, characterised by that [:with :its help a process according to claim 1 can be executed]."

The EPO has granted [http://swpat.ffii.org/patents/stats/index.en.html more than 30,000] pure software patents in this manner, and the number has been rising at a rate of 3,000 per year.

Most of these patents are broad and trivial and not significantly different from corresponding types of patents that the US and Japan have been allowing.  In fact the three patent offices have created a common [http://swpat.ffii.org/players/useujp/ "Trilateral Standard"] for granting such patents in May 2000, summarised under the misleading term "computer-implemented inventions."  The pro-software patent lobby has been publicly asserting that patenting "computer-implemented inventions" is somehow different from patenting software "as such."  But these differences are [http://swpat.ffii.org/papers/eubsa-swpat0202/tech/ insignificant].

Some commentators distract attention from the nature of the code that executes on a computer, by stating that no clear distinction can be made between "hardware" and "software."  However, the distinction that applies has to do with the nonpatentability of '''/abstraction/''', not with the physical way code is expressed.  A unique piece of hardware, a computer, is now available for all to use, and it was designed to automate abstract logic by providing '''/generic logical functions/''' which can be executed by providing it with instructions that are inherently abstract themselves.  The presence of this unique generic logic device in our lives is what has brought about the need to assure that the implications of software for patent policy are honored and acknowledged.  Code is certainly embodied in physical form, but it is a '''/representation/''' of abstract ideas, just as surely as written mathematical calculations are.

In August 2000 the European Patent Organisation, i.e. the intergovernmental organisation that runs the European Patent Office,  '''/attempted to delete all the exclusions listed under Art 52 of the European Patent Convention/'''.  Due to public resistance which they apparently did not anticipate, this effort failed.

In 2002, the European Commission's Directorate for the Internal Market (under Monti's successor Frits Bolkestein) submitted [http://swpat.ffii.org/papers/eubsa-swpat0202/ proposal 2002/0047], for a Directive "on the patentability of computer-implemented inventions." This proposal was claimed to serve the purposes of harmonizing Member State laws and clarifying some details with the aim of preventing excesses of the EPO, and it did not literally allow program claims.  However, an attentive reading shows that it is actually designed to '''/codify the EPO's practice/''' regardless of its unsound legal foundation, and to ''*remove explicit limits on patentability under the law*''.

On September 24, 2003, the [http://swpat.ffii.org/news/03/plen0924/index.en.html European Parliament as a whole (plenary assembly) voted] to incorporate [http://swpat.ffii.org/papers/europarl0309/index.en.html a set of amendments into the Directive] that actually accomplished what the Commission had pretended to aim for: it clarified and harmonised the rules, reaffirming the non-patentability of programming and business logic and upholding freedom of publication and interoperation.  This set of amendments was based on a year of work in the Parliament's committees for [http://swpat.ffii.org/papers/eubsa-swpat0202/cult0212/ Culture] and [http://swpat.ffii.org/papers/eubsa-swpat0202/itre0212/ Industry].  However the Directive has been considered to belong within the domain of the ''Legal Affairs Committee'' (JURI), which is dominated by !MEPs with close affinity to the patent establishment.  JURI ignored the proposals of the other committees and proposed a set of [http://swpat.ffii.org/news/03/juri0617/ fake limits on patentability], in an attempt to fool the plenary assembly. 

Pursuant to the European Union's ''Codecision Procedure'', the amended proposal was next examined by the Council of Ministers.  Within the Council, the "Working Party on Intellectual Property (Patents)" is in charge of the dossier.  This group consists of exactly the same members as the Administrative Council of the European Patent Office: the patent office administrators from the national governments.

After a few months of secret negotiations, the "Working Party" produced a [http://swpat.ffii.org/papers/europarl0309/cons0401/index.en.html "compromise document"] that '''/removed all of the Parliament's limiting amendments and reinstated the Commission's proposal/''' and additionally '''/explicitly allowed program claims (Art 5(2)) and disallowed any interoperability privilege within patent law (Rec 17) while inserting some fake limits from JURI (Art 4A etc)/''', resulting in the most extreme and uncompromising proposal yet.  Access to this document was denied until the very last minute "due to the sensitive nature of the negotiations and the absence of an overriding public interest."

On 18 May 2004, the Council [http://kwiki.ffii.org/?Cons040518En approved the Working Party's text (with some cosmetic modifications) by a slim majority] despite the apparent intention of a number of countries to follow Germany's lead in promising to vote against it. In that session, Germany claimed to be satisfied by a meaningless amendment; the Netherlands supported the document while admitting that it might be problematic; and Commissioner Frits Bolkestein inserted an amendment in Article 4 which, he claimed, clearly made software unpatentable, when in fact his phrasing merely reasserted deceptive terminology and '''/Article 5(2), by allowing program claims, unambiguously states the exact opposite/'''.  In the press conference that followed the Council vote, Bolkestein failed to offer any examples of software that would not be patentable pursuant to the proposal.

The European Parliament has to have at least 367 "yes"-votes (=absolute majority of the 732 seats, no less) on all critical amendments to make sure that there are no holes left in the text which would in turn result in affirming the 30.000 already granted patents and allow the patent offices to go even further.

== Background information ==
 * [http://digital-law-online.info/lpdi1.0/treatise68.html How to draft a software patent]
