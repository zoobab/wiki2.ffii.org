--> 
[ [:LtrCons0406En: Appeal]
| [:SwpatsiskuEn: Studies]
| [:MlhtBibtexEn: BibTeX]
]

== Studies about software patents taken into account by the EP in first reading ==

 * 2000: [http://books.nap.edu/html/digital_dilemma/ The Digital Dillemma: Intellectual Property in the Information Age (National Research Council)] (NRC00):
   * Granting of software patents started in the US without oversight from the legislative branch (just like in Europe)
   * Doubts about ability US Patent Office to handle software patent related decisions, and whether it has enough knowledge and prior art information available
   * Software market is different from traditional industries: small or no market in "components", most people write programs from scratch, no consultation of patent literature, high chances of infringement
   * Innovation in software development occurs faster than in other industries, patents often granted after the technology has become obsolete
   * Software patents may cause the software industry to cease being a creative cottage industry, restricting it to large companies that cross-license 
 * October 2000: [http://europa.eu.int/comm/internal_market/indprop/comp/study_en.htm IPI Study] (IPI00):
   * "As shown in our economic study of the literature (Section III of our report), most economists have doubts whether economic efficiency, i.e. increased overall welfare, is achieved by having or making computer program related inventions patentable. This caution is supported by the continuing, indeed growing, concern in the USA on the issues surrounding patents on computer program related inventions. The debate in the States is not finished."
   * There is no evidence that the positive effects stemming from owning software patents outweigh the following deep concerns:
     * that patents are being granted on trivial, indeed old, ideas and that consideration of such patents let alone attacking such patents is a major burden, particularly on SME and independent software developers;
     * that patents may strengthen the market position of the big players; and
     * that the computer program related industries are examples of industries where incremental innovation occurs and that there are serious concerns whether, in such industries, patents are welfare enhancing.
 * December 2000: [http://europa.eu.int/comm/internal_market/en/indprop/comp/softpatanalyse.htm EU Consultation by Commission] ([http://swpat.ffii.org/papers/eukonsult00/index.en.html FFII analysis]) (CON00):
   * 92% of respondents were against software patents, 44% of remaining 8% proponents were "IPR-specialists".
   * What percentage of participants belonging to the following groups was against software patents:
     * Individuals: 98,5%
     * SMEs: 95%
     * Large Enterprises: 81%
     * Associations: 45%
     * User: 99,6%
     * Student: 99,5%
     * Academic: 98,0%
     * Software Developer: 95,8%
     * IP Professional: 33%
     * Governmental: 22%
 * May 2001: [http://www.awt.nl/uploads/files/as21.pdf Intellectual property rights in  a knowledge-based economy (The Dutch Advisory Council for Science and Technology Policy)] (AWT01)
   * "Though IPR regulations for software did not exist in the 1970s, rapid innovation took place nonetheless."
   * "The legal overlap between software patents and copyrights to protect the same product is claimed to be over-protective, and likely to result in a monopolistic dominance of technological know-how in software development."
   * "Nevertheless, from this debate [:about :software patents in the US] we may conclude that, to some extent, drawbacks of current over-protective regimes outweigh the advantages arising from implementation of a strengthened legislation."
   * "Software is in many ways a `general use' technology. [...] Thus, if it were widely diffused, it would have very large positive effects on further knowledge creation, and would reduce costs of production of many goods in the economy."
   * "That is, the net benefit of the monopoly given to innovators while still strong at the individual level, is at the social level less so. [...] An over-protective regime prevents just the type of entry that causes and is caused by rapid advance (Samuelson et. al., op. cit.; Davis et. al., 1996)"
   * "These sorts of arguments suggest that if it were possible, software should have a less restrictive IPR regime than many other goods."
 * September 2001: [http://www.isi.fhg.de/ti/Soft_summary.pdf Micro- and Macroeconomic Implications of the Patentability of Software Innovations (Max Planck Institute and Fraunhofer Institute)] ([http://trendchart.cordis.lu/Reports/Documents/Edler_Lux_2003.ppt presentation slides]) (MPF01):
   * Patents are the least used way and least significant means to protect investments in software development
   * Development time is very short and innovation occurs extremely rapidly in the software field compared to other fields
   * More incremental development in software branch than in most other industries
   * Rapid innovation and effective development process even more important in software than in other fields, so obstacles to conducting development work are even more serious here
   * Interoperability is extremely important
   * R&D intensity has no influence on patenting behaviour
   * Basic rule as in other branches holds: bigger companies obtain more patents
   * 'The theory that patents facilitate market access, above all for young companies, could not be confirmed.'
   * 'The strategic benefit of patents in international competition is obvious, but concentrated on very few large companies.'
   * 'From the legal part of the study it emerged that the present ban on patenting "software as such" leads to problems. The present statutory exception for "computer programmes as such" not only does not allow reasonable interpretations, but also in practice leads to a tremendous amount of arguments which is incomprehensible, not only for outsiders.'
 * April 2002: [http://www.europarl.eu.int/meetdocs/committees/juri/20020619/SoftwarePatent.pub.pdf Discussion of European-level legislation in the field of patents for software (Bakels, Hugenholtz)] (BAH02):
   * Commission-ordered study
   * General problems with patent system as a whole
   * Software patents have caused a lot of problems in the US (both economical and administrative)
   * Requirement of "technical contribution" is too vague in Commission proposal and can easily be circumvented, may even not be relevant by Commission's own admission (in that it cannot prevent all business methods from being patented)
 * August 2002: [http://europa.eu.int/comm/enterprise/library/enterprise-papers/paper8.htm Technology policy in the telecommunication sector: Market responses and economic impacts (Heli Koski)] ([http://swpat.ffii.org/papers/cec-telecom02/index.en.html FFII analysis]) (KIO02):
   * Patents cause a lot of problems in the Telecom sector
   * Patents are mainly used strategically there (block competitors, make sure you are not blocked by a competitor), not to earn back investments
 * September 2002: [http://eescopinions.esc.eu.int/EESCopinionDocument.aspx?identifier=ces\int\int145\ces1031-2002_ac.doc&language=EN Opinion Economic and Social Committee (EESC)] (EESC02) on the Commission proposal:
   * Commission text allows patents on software executed by a computer
   * Commission text simply codifies EPO practice
   * Commission text does not prevent patents on business (or on any other) methods
   * Commission text does not preserve interoperability, confuses matters further instead
   * Doubts about intention of Commission, which talks about several irrelevant things (such as piracy) in its introduction
   * No effective economic analysis that shows benefits for !SMEs
   * "It is hardly plausible to have us believe that the directive would only be a sort of reversible three-year experiment, at the end of which an assessment would be made"
   * etc.
 * December 2002: [http://www.europarl.eu.int/meetdocs/committees/juri/20030324/487019en.pdf Opinion Committee for Cultural Affairs and Youth of EP] ([http://swpat.ffii.org/papers/eubsa-swpat0202/cult0212/index.en.html FFII analysis]) (CULT02):
   * "'Technical' means 'application of natural forces to control physical effects beyond the digital representation of information'" (art 2 EP)
   * Dataprocessing is not a field of technology (art 3 EP)
 * December 2002: [http://www.europarl.eu.int/meetdocs/committees/juri/20030324/490455en.pdf Opinion Committee for Industry and Trade of EP] ([http://swpat.ffii.org/papers/eubsa-swpat0202/itre0212/index.en.html FFII analysis]) (ITRE02):
   * Publication can never be an infringement (art 5 EP)
   * Interoperability can never constitute patent infringement (art 6a (9 after renumbering) of EP)
 * April 2003: [http://www.researchoninnovation.org/online.htm#sw An Empirical Look at Software Patents (Bessen&Hunt)] (BH03):
   * Software patents have in the US resulted in a transfer of R&D money to obtaining patents
   * Most software patents are owned by the traditional industry
     * This dispels (once more) the myth that they allow the "lone software inventor" to benefit from his innovation.
     * This traditional industry often uses software to control machines, and as such this study shows that software patents are bad there as well
   * Software patents hinder instead of encourage innovation in fields where most innovation is incremental, such as in software development
 * October 2003: [http://www.ftc.gov/os/2003/10/innovationrpt.pdf To Promote Innovation: The Proper Balance of Competition and Patent Law and Policy (Federal Trade Commission, US)] (FTC03)
   * All industries are not alike: in the computer hardware and software patents are used more and more as defensive means. This results in "patent thickets": overlapping and entangled patent rights of several companies, which requires a license for all such patents before being able to commercialise a product.
   * The software industry is characterised by cumulative innovation, low capital costs, swift consecutive innovations, short product life spans and alternative encouragements for innovation such as copyright and Open Source. This is very different from the hardware, biotech and pharmaceutical industries.
   * Innovation in the software industry is driven by competition.
   * software patents can hinder follow-up innovation and increase the startup costs. Avoiding infringement is expensive and uncertain.
   * There is also a big problem with trivial patents.

----
== To be added ==

 * In fact, read just [http://repositories.cdlib.org/iber/econ/E03-331/ one paper], by the economist Bronwyn H. Hall at the University of California at Berkeley 'Business Method Patents, Innovation, and Policy' (where she discusses software patents, as no non-trivial business method patent has been granted which does not rely upon software). You see the conclusion: "Broad evidence that the patent system encourages innovation always and everywhere is hard to come by. When innovations are incremental [:such :as with software] and when many different innovations must be combined [such as with software] to make a useful product, it is less obvious that benefits of the patent system outweigh the costs."

 * Or how about the Journal of Economic Growth, 2004, vol. 9, issue 1, pages 81-123:
   * "Furthermore, patents affect the allocation of R&D resources across industries, and patents can distort resources away from industries where they are most productive."

 * [http://www.vrijschrift.nl/nl/softwarepatenten/publ_overheid/ovc.pdf Verkade 1999] (Dutch)

 * [http://www.vrijschrift.nl/nl/softwarepatenten/publ_overheid/juri_econom_swpat.pdf Dutch ministry of economic affairs 2001] (Dutch)

 * Rossi050310En

 * EPDGEcoSci050216En

 * Shapiro 2001: [http://haas.berkeley.edu/~shapiro/thicket.pdf Navigating the Patent Thicket: Cross Licenses, Patent Pools, and Standard-Setting]

 * http://www.law.ed.ac.uk/ahrb/script-ed/vol2-1/park.asp

----

== Introductory Question ==

'''Q: What is a software patent?'''

'''Short A:''' Software patents are patents on an immaterial innovations. This means that the novel part of the "invention" is limited to a new insight in maths, data processing, business methods, etc. These innovations are normally not patentable, but by stating they are "computer-implemented" (i.e., turned into software) they suddenly do become patentable by the EPO's (and Commission's and Council's) standards. Hence the name "software patents".

'''Long A:''' 

----

== Economical Questions ==

'''Q: Why did the EP categorically say no to software patents?'''

'''Short A:''' Patent law is economic law, and virtually all economic studies show mainly negative effects from software patents. The Commission did not carry out a thorough impact assessment study. The majority of European companies is against software patents.

'''Long A:''' As stated in the introduction of BAH02, patent law is economic law. This means that unlike copyright, where there is a notion of a natural author's right to a creation, patents are only to be granted if its clear they will spur the economy and innovation. NRC00 and BH03 (and since the EP's decision, also FTC03) show however that software patents do not have this effect in the US, where they exist already since quite some time. IPI00 and MPF00 could also not find any evidence that software patents would be generally beneficial to European companies, or indeed not even that the negative effects of software patents would be neutralised by the positive ones.

KIO02 indicates that similar patents have very bad effects in the Telecommunications sector. CON00 and MPF01 show that the majority of European companies (both large and small), academics and individuals are against extending the scope of patentability, and that patents are among the least significant forms of IP-protection. Finally, EESC02 shows that the Economic and Social Committee notes that not a single thorough study on the economic effects of software patents has been undertaken, especially in relation to their effects on SMEs (Small and Medium Enterprises). This lack of knowledge is also heavily criticised in BAH02.
 
 
'''Q: Don't investments in software development have to be protected?'''

'''Short A:''' The major investments in software development are protected by copyright, and several other protection means (which require this copyright protection to work) are employed as well. Software patents undermine the protections offered by copyright.

'''Long A:''' The ultimate result of the software development process, the computer program, is already protected by copyright. This protection covers the work that went into turning a large number of ideas (a few from yourself, but many from other people as well) into a usable program: creating a design (blueprint) of the program, writing it and then testing it and removing all the errors.

Software patents on the other hand cover the underlying principles and methods of programs (even though patents were originally intended to allow claims on inventions, not on mere ideas). Because of the incremental nature of the software field, every program is bound to use many pre-existing methods and techniques (just like when constructing a mathematical proof, or when writing a story). Allowing monopolies on such individual methods therefore blocks a large number of independent follow-up creations.

This is confirmed by MPF00, where a majority of all questioned companies agrees that the introduction of software patents will diminish competition, reduce the variety of products, and inhibit innovation. It also notes that companies use many different ways to earn back software-related investments (in order of importance): copy-protection measures, customer-relations management, lead-time advantages, protections against reverse-engineering, trademarks, secrecy pledges and incentives for employees, know-how contracts and prosecution of copyrights. Only at the very end, patents are mentioned.

Finally, both KIO02 and BH03 note that software/telecom patents are mainly used strategically (offensively to lock out a competitor from a market segment, and defensively to make sure you cannot be locked out by someone else), and not to earn back investments.


'''Q: What about mobile phones and washing machines?'''

'''Short A:''' The European Parliament's version does not exclude technical inventions which are computer-controlled. Several patents in the telecom (and electronics) sector are however indeed pure software patents and would remain unenforceable, but KIO02 explains those have an overall negative effect as well. Same for BH03.

----

== Juridical Questions ==

'''Q: What is the general idea behind the European Parliament (EP) amendments?'''

'''Short A:''' Keep software-controlled technical inventions patentable, but make sure that non-inventions cannot become patentable by stating they are computer-controlled.

'''Long A:''' The doctrine followed by the European Parliament boils down to stating that whether or not an innovation makes use of software, is completely irrelevant as far as patentability is concerned. If the described innovation would be patentable if described in plain English (or another natural language) and when not executed by a computer, would it be patentable? If yes, then your invention is perfectly patentable, also if you say it's entirely realised using a computer program.

If no: sorry, but simply translating the instructions to realise your innovation into a computer program does not suddenly turn it into a patentable invention (the work you did while doing that is protected by copyright, and the rest is either a patentable invention or not, regardless of its form).


'''Q: Doesn't the EP-version contradict international treaties such as TRIPS?'''

'''Short A:''' No, TRIPs only requires patents to be available for inventions. Software (executed by a computer or not) is not an invention in Europe. Further, TRIPs and WIPO even explicitly forbid software patents.


'''Q: Isn't the Commission/Council text merely confirming the status quo?'''

'''Short A:''' As EESC02 notes, they simply codify the practice of the European Patent Office (EPO). The EPO has already granted more than 30,000 software and business method patents.


'''Q: Why did the EP insist on referring to "forces of nature"?'''

'''Short A:''' Patent law must be limited to fields where it has possibly a positive overall effect. The forces of nature doctrine is what distinguished our European Patent law from the US, and the cause for its high international regard. It was abolished when it turned out it was incompatible with software patents.


'''Q: Why is "data processing" excluded from patentability and what does this mean?'''

'''Short A:''' All a computer can do, is process data. When it is used to control an invention, the computer still merely processes data, but the invention may be or do something patentable. This article ensures compatibility with TRIPs and clarifies that software is not patentable.


'''Q: Why was the EP not content with the Commission's safeguards for interoperability?'''

'''Short A:''' The Commission only guarantees the right to reverse-engineer, which cannot be forbidden by a patent in the first place. Its article however does not allow the use of the discovered information. Anti-trust law is too blunt a tool to solve this problem.
