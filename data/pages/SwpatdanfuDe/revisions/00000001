 * Punkt 11 muss weiter nach oben und sprachlich besser gestaltet werden.

 * Frage nach Patente als Mittel gegen Reverse Engineering

----
Folgenden Text habe ich als Ergänzung über die fitug-Liste veröffentlicht.

== Überlegungen zu Softwarepatenten aus Sicht der Endnutzer/Gesellschaft ==


=== 1) triviale Patente ===

Der Chef von Amazon sagt zu seinen Entwicklern: "Leute, der Nielsen 
schreibt, dass gute Websites den Benutzer mit möglichst wenig 
Mausklicks zum Ziel führen. Also sollt ihr unsere Bestellungen so 
programmieren, dass die Kunden mit einem Klick bestellen können." Die 
Entwickler sagen: "Ja, Chef", und machen das - ist ja nicht schwer. 
Der Anwalt von Amazon, der sein Geld verdienen will, meldet erstmal 
alles, was irgendwie wie eine Erfindung aussieht, beim Patentamt an. 
Anderswo sagt der Chef von einem anderen Onlineladen: "Leute, der 
Nielsen schreibt..." usw. Auch seine Entwickler sagen "Ja, Chef" und 
machen das - ist ja nicht schwer. Aber jetzt kommt der Anwalt von 
Amazon und sagt: "Wir haben das patentiert. Wer nicht bei __uns__ 
einkauft, muss seine Sachen eben umständlich bestellen".

Wenn du dich also mal wieder drüber ärgerst, dass bei deinem Computer 
alles so kompliziert ist,liegt das auch daran, dass jemand alle 
einfachen Sachen patentiert hat.

=== 2) Interoperabilität und Kontrolle ===

Da gibt's ein tolles Programm für Windows. Ein Nutzer erzeugt damit 
etliche Daten. Nun will er diese Daten aber auch auf Rechnern nutzen, 
die mit einem anderen Betriebssystem laufen (z.B. Linux). Also sagt 
er zu seinen Entwicklern: "Schreibt mir mal ein Programm, das diese 
Daten auf Linux liest". Die Entwickler sagen: "Klar Chef, machen 
wir." Da sagt der Anwalt des Programmherstellers: "Das dürft ihr 
nicht, wir haben das Datenformat und das Verfahren zum Entschlüsseln 
der Daten patentiert. Selbst wenn wir das Leseprogramm nicht mehr 
pflegen und es auf neuen Betriebssytemen nicht mehr läuft, müsst ihr 
warten, bis unsere Patente ausgelaufen sind, ehe ihr an die Daten 
dürft". Damit gibt das Patent dem "Erfinder" nicht nur die Kontrolle 
über seine eigene Leistung, sondern auch über die fremden Leistungen 
anderer.

=== 2a) Interoperabilität, die Zweite ===

Es ist auch nicht möglich, die Ausgabe eines Programms von einem 
eigenen Program weiterverarbeiten zu lassen, wenn das Datenformat 
bzw. die Verfahren zur Entschlüsselung dieses Datenformats patentiert 
sind. Im technischen Bereich ist das undenkbar - die Produkte eines 
patentierten (z.B. mechanischen oder chemischen) Prozesses sind 
natürlich frei verwendbar.

=== 3) Archivierung und Offenlegung ===

Manche Daten müssen lange archiviert werden. Wenn man sie dann 
braucht, gibt es Ärger. Denn die Programme, die diese Daten erzeugt 
haben, gibt es oft nicht mehr; und wenn sie mitarchiviert worden 
sind, dann laufen sie auf den heutigen Rechnern nicht mehr. 
Patente sind ja "Offenlegungen". Es sollte also helfen, wenn ein 
Datenarchivierungsverfahren patentiert wurde. Leider stimmt das 
nicht. Oft werden nur wichtige Teile des Verfahrens patentiert 
werden, nicht das ganze Verfahren selber.
Hat man eine "offene" Version eines Archivierungsprogrammes, d.h. 
kann man das Archivierungsprogramm im Quelltext lesen und verstehen, 
hat man die nötigen Informationen, um die archivierten Daten 
jederzeit lesen zu können. Die Einreichung von Quelltexten wird aber 
derzeit bei Softwarepatenten nicht gefordert. 
Es gibt zwar viele Software, die im Quelltext veröffentlicht wird 
(OpenSource). Da die Weitergabe dieser Software oft umsonst erfolgt, 
können sich die Entwickler Patent- und Gerichtsgebühren nicht leisten 
und schrecken daher oft schon vor der Androhung von Patentklagen 
zurück. Deshalb ist gerade für nicht patentierte Datenformate die 
Archivierungssicherheit höher. Hier verkehrt sich der Sinn der 
"Offenlegung" in sein Gegenteil.

=== 4) Privatisierung von öffentlichen Forschungsergebnissen ===

Wenn ein Wissenschaftler etwas erforscht hat, z.B. Gehörpsychologie, 
so kann das z.B. in der Konstruktion von Audioformaten angewendet 
werden. Kann nun die (triviale) Umsetzung dieser Forschung in 
Programme patentiert werden, so ist den Mitbewerbern (und Open Source-
Entwicklern) die Nutzung dieser Forschungsergebnisse verwehrt. Dies 
gilt nicht nur für firmeninterne Forschung (was ja legitim wäre), 
sondern auch für öffentliche Forschung, und für Forschungsergebnisse, 
die vor ihrer zu patentierenden Umsetzung veröffentlicht wurden. 

Damit wird öffentliche Forschung privatisiert, sie kommt in erster 
Linie Einzelinteressen zugute.

=== 5) Prüfungskosten ===

Im bestehenden Patentverfahren werden Patente nach vorwiegend 
formaler Prüfung eingetragen. Eine endgültige Klärung der 
Berechtigung des Anspruchs muss oft gerichtlich stattfinden. Für 
Verfahren, deren Entwicklung bereits hohe Kosten verursacht - 
schließlich muß eine technisches Verfahren nicht nur beschrieben, 
sondern auch demonstriert werden können -, ist die Überprüfung der 
Patente der Mitbewerber auf gerichtlichem Wege sicherlich meist 
verhältnismäßig. Im Softwarebereich werden viele Erfindungen mit nur 
geringen Investitionen (Zeit des Entwicklers und sein Computer) 
getätigt; im Falle eines Open Source-Entwicklers werden die Produkte 
auch oft kostenlos abgegeben. Ein Gerichtsverfahren ist selbst dann, 
wenn es gute Aussichten hat, oft nicht finanzierbar.
 
Im 
Softwarebereich müssen Prüfungsverfahren entwickelt werden, die eine 
Überprüfung von Patenten auf ihre Erfindungshöhe mit geringeren 
Kosten möglich machen oder solche Patente von vornherein verhindern. 
Sonst wird die gesellschaftlich nützlichste Form der 
Softwareentwicklung, die Programmierung von kostenlosen Open Source-
Programmen, drastisch behindert.


=== Fazit ===
Patente sind ursprünglich dem Wesen nach eine Balance zwischen Nutzen 
für den Patentinhaber (Patentschutz) und Nutzen für die Gesellschaft 
(vermehrte Innovation, Offenlegung). Die geplante Umsetzung von 
Softwarepatenten verschiebt diese Balance zum Nutzen der 
Patentinhaber und zum Schaden der Gesellschaft. Sie ist daher 
abzulehnen.

Bevor Softwarepatente sinnvoll umgesetzt werden können, muss das 
Problem der Beurteilung der Erfindungshöhe gelöst werden, d.h. die 
Patentierung von Lösungen, die sich aus der Aufgabenstellung 
angesichts der veröffentlichten Techniken und Forschungen trivial 
ergeben, muss verhindert werden.
Zudem muss die Offenlegung den Erfordernissen der Gesellschaft an 
Software angepasst werden, d.h. patentierte Software sollte (auch) 
als Quelltext offengelegt werden,  und die damit verbundenen 
Datenformate müssen offengelegt und zur Verwendung durch andere 
Entwickler (unter Umgehung oder mit Lizensierung der patentierten 
Verfahren) frei sein.

----
Dieser (mein obiger) Text ist frei, d.h. er darf von jedermann 
verbreitet und verändert werden, auch ohne Nennung meines Namens.

Man kann die einzelnen Punkte gut mit Fällen von swpat.ffii.org 
verlinken; auch ist das Niveau der einzelnen Unterpunkte noch etwas 
unterschiedlich. Zu den "ganz einfachen" Erklärungen könnte man sogar 
ein paar einfache Flash-Animationen anbieten.

Michael Mendelsohn
----
